{
  "name": "armory",
  "version": "0.6.1",
  "description": "A wrapper for the WoW Armory API.",
  "keywords": [
    "wow",
    "warcraft",
    "armory",
    "api",
    "blizzard",
    "mmo",
    "gaming"
  ],
  "bugs": {
    "url": "https://github.com/xtian/node-armory/issues"
  },
  "author": {
    "name": "Christian Wesselhoeft",
    "email": "hi@xtian.us"
  },
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/xtian/node-armory.git"
  },
  "dependencies": {
    "request": "~2"
  },
  "devDependencies": {
    "jshint": "~1",
    "tap": "~0.4"
  },
  "scripts": {
    "test": "make test"
  },
  "license": "MIT",
  "engines": [
    "node >= 0.4.0"
  ],
  "readme": "# node-armory\n\nA simple [node.js](http://github.com/joyent/node) wrapper around Blizzard's [REST API for World of Warcraft](http://blizzard.github.com/api-wow-docs/).\n\n## Installation\n\n    npm install armory\n\n## Documentation\n\n[WoW API Documenation](http://blizzard.github.com/api-wow-docs)\n\nAll methods take an options object and callback as arguments.\n\nIf a string or number is passed instead of an options object, that value will be used as `options.id`. The rest of a method's required options can be provided using the `defaults` method.\n\nIf no callback is provided, a Stream will be returned.\n\nExcept for the static APIs, all options objects can have the following properties:\n\n* `name`|`id`\n* `region`\n* `locale` _(optional)_\n\nNote: `name` and `id` are interchangeable, and `locale` does not affect all API methods.\n\n***\n### arena(options, callback)\nRetrieves an object containing data about an arena team.\n\nAdditional options:\n\n* `realm`\n* `size`\n\n### arenaLadder(options, callback)\nRetrieves an array of arena ladder information.\n\n    armory.arenaLadder({\n      region: 'us'\n    , battlegroup: 'vindication'\n    , id: '2v2'\n    }, function(err, teams) {\n        ...\n    })\n\nAdditional options:\n\n* `asc`\n* `battlegroup`\n* `page`\n* `size`\n\n### rbgLadder(options, callback)\nRetrieves an array of rated battleground ladder information.\n\nAdditional options:\n\n* `asc`\n* `page`\n* `size`\n\n***\n### battlePetStats(options, callback)\nRetrieves object describing a battle pet.\n\nAdditional options:\n\n* `breedId`\n* `level`\n* `qualityId`\n\n***\n### challenge(options, callback)\nRetrieves an array of challenge mode leaderboard information for a realm.\n\n### challengeRegion(options, callback)\nRetrieves an array of challenge mode leaderboard information for a region.\n\nNote: `challengeRegion` does not take an `id` option.\n\n    armory.challengeRegion({ region: 'us' }, function(err, res) { ... })\n\n***\n### character(options, callback)\nRetrieves an object containing data about a character.\n### guild(options, callback)\nRetrieves an object containing data about a guild.\n\nAdditional options:\n\n* `fields` _(optional)_: must be an array\n* `lastModified` _(optional)_: Date or timestamp to use for If-Modified-Since header\n* `realm`\n\n***\n### defaults(options)\nReturns a new instance of the module where all options will default to the provided values. If the first argument of a method is a number or string, it will be used as the `id`|`name` option.\n\n    var armory = require('armory').defaults({\n      name: 'Dargonaut'\n    , realm: 'Shadowmoon'\n    , region: 'us'\n    })\n\n    armory.character(function(err, character) { ... })\n    armory.character('Dewbaca', function(err, character) { ... })\n\n    armory.character({\n      name: 'Talent'\n    , realm: 'Lightbringer'\n\n    }, function(err, character) { ... });\n\n***\n### achievement(options, callback)\nRetrieves an object containing data about an achievement.\n### auction(options, callback)\nRetrieves an array of auction data URLs.\n### battlePetSpecies(options, callback)\nRetrieves an object containing data about a battle pet species.\n### battlePetAbility(options, callback)\nRetrieves an object containing data about a battle pet ability.\n### item(options, callback)\nRetrieves an object containing data about an item.\n### itemSet(options, callback)\nRetrieves an object containing data about an item set.\n### quest(options, callback)\nRetrieves an object containing data about a quest.\n### recipe(options, callback)\nRetrieves an object containing data about a recipe.\n### spell(options, callback)\nRetrieves an object containing data about a spell.\n\n***\n### realmStatus(options, callback)\nRetrieves an array containing the status of one or more realms.\n\n    armory.realmStatus({ region: 'us' }, function(err, realms) { ... );\n\nA single realm name or an array of realm names can be passed. If no names are provided, the status of all realms will be returned.\n\n***\n### battlegroups(options, callback)\nRetrieves a static array of all battlegroup names.\n### characterAchievements(options, callback)\nRetrieves a static array of all character achievements.\n### classes(options, callback)\nRetrieves a static array of data about character classes.\n### guildAchievements(options, callback)\nRetrieves a static array of all guild achievements.\n### perks(options, callback)\nRetrieves a static array of data about guild perks.\n### races(options, callback)\nRetrieves a static array of data about character races.\n### rewards(options, callback)\nRetrieves a static array of data about guild rewards.\n\nNote: `id` and `name` are not used by these methods.\n\n***\n### Properties\n#### auth.publicKey, auth.privateKey\nKeys to use for generating an authorization header.\n\n    var armory = require('armory')\n\n    armory.auth.publicKey = 'foo'\n    armory.auth.privateKey = 'bar'\n\n    armory.realmStatus(function() { ... })\n\n### Notes on usage:\n\n* If an error occurs (including API errors), it will be passed as an Error object to the first parameter of the callback with its message in the `message` property. Otherwise, the parsed response body will passed as the second parameter and the full response will be passed as the third parameter.\n* `lastModified` must be a `Date` instance or a string recognized by `Date.parse()`. If the requested resource has not been modified since the time of `lastModifed`, the callback will be invoked with the first two parameters empty.\n",
  "readmeFilename": "README.md",
  "_id": "armory@0.6.1",
  "dist": {
    "shasum": "7c04f04e511dbcf0903d4aba245eaeea0ec0a97c"
  },
  "_from": "armory@0.6.1",
  "_resolved": "https://registry.npmjs.org/armory/-/armory-0.6.1.tgz"
}
